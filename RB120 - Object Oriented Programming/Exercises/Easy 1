1. Banner Class

class Banner
  def initialize(message)
    @message = message
  end

   def to_s
    [horizontal_rule, empty_line, message_line, empty_line, horizontal_rule].join("\n")
   end

  private

  def horizontal_rule
    "+#{'-' * (@message.length + 2)}+"
  end

  def empty_line
    "|#{' ' * (@message.length + 2)}|"
  end

  def message_line
    "| #{@message} |"
  end
end

2. What's the Output?	

class Pet
  attr_reader :name

  def initialize(name)
    @name = name.to_s
  end

  def to_s
    @name.upcase!
    "My name is #{@name}."
  end
end

name = 'Fluffy'
fluffy = Pet.new(name)
puts fluffy.name       # >> Fluffy
puts fluffy            # >> FLUFFY
puts fluffy.name       # >> FLUFFY
puts name              # >> FLUFFY

3. Fix the Program - Books (Part 1)	

class Book
   attr_reader(:author, :title)  
   
   def initialize(author, title)
    @author = author
    @title = title
  end

  def to_s
    %("#{title}", by #{author})
  end
end

book = Book.new("Neil Stephenson", "Snow Crash")
puts %(The author of "#{book.title}" is #{book.author}.)
puts %(book = #{book}.)

4. Fix the Program - Books (Part 2)

class Book
   attr_reader(:author, :title)  
   
   def initialize(author, title)
    @author = author
    @title = title
  end  
  
  def to_s
    %("#{title}", by #{author})
  end
end

book = Book.new
book.author = "Neil Stephenson"
book.title = "Snow Crash"
puts %(The author of "#{book.title}" is #{book.author}.)
puts %(book = #{book}.)

5. Fix the Program - Persons	

class Person
  attr_writer(:first_name, :last_name)
  
  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  def to_s
    "#{@first_name.capitalize} #{@last_name.capitalize}"
  end
end

person = Person.new('john', 'doe')
puts person

person.first_name = 'jane'
person.last_name = 'smith'
puts person

6. Fix the Program - Flight Data	

class Flight
  attr_reader :database_handle

  def initialize(flight_number)
    @database_handle = Database.init
    @flight_number = flight_number
  end
end

In this class definition, attr_accessor provide both public getter and setter methods which can be dangerous 
and allow someone to directly modify the database. To avoid any manipulation of the database we could put an attr_reader.

7. Buggy Code - Car Mileage	

class Car
  attr_accessor :mileage

  def initialize
    @mileage = 0
  end

  def increment_mileage(miles)
    total = mileage + miles
    self.mileage = total
  end

  def print_mileage
    puts mileage
  end
end

car = Car.new
car.mileage = 5000
car.increment_mileage(678)
car.print_mileage  # should print 5678

8. Rectangles and Squares	

class Rectangle
  def initialize(height, width)
    @height = height
    @width = width
  end

  def area
    @height * @width
  end
end
  
 class Square < Rectangle 
 def initialize(side)
   super(side, side)
   end
 end
 
 square = Square.new(5)
 puts "area of square = #{square.area}"
 
9. Complete the Program - Cats!	

class Pet
  def initialize(name, age)
    @name = name
    @age = age
  end
end

class Cat < Pet
  def initialize(name, age, color)
  super(name, age)
  @color = color 
end

def to_s
  "My cat #{name} is #{age} years old and has #{@color} fur."
  end
end

pudding = Cat.new('Pudding', 7, 'black and white')
butterscotch = Cat.new('Butterscotch', 10, 'tan and white')
puts pudding, butterscotch

10. Refactoring Vehicles

class Vehicle
  attr_reader :make, :model

  def initialize(make, model)
    @make = make
    @model = model
  end

  def to_s
    "#{make} #{model}"
  end
end

class Car < Vehicle
  def wheels
    4
  end
end

class Motorcycle < Vehicle
  def wheels
    2
  end
end

class Truck < Vehicle
  attr_reader :payload

  def initialize(make, model, payload)
    super(make, model)
    @payload = payload
  end

  def wheels
    6
  end
end

truck = Truck.new('Fire', 'Ford', '1000kg')

p truck.make
p truck.wheels
