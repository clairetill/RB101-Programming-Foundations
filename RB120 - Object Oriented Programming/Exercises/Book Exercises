The Object Model

1. How do we create an object in Ruby? Give an example of the creation of an object.

Solution
We create an object by defining a class and instantiating it by using the .new method to create an instance,
also known as an object.

class MyClass
end

my_obj = MyClass.new

2. What is a module? What is its purpose? How do we use them with our classes? Create a module for the class 
you created in exercise 1 and include it properly.

Solution
A module allows us to group reusable code into one place. We use modules in our classes by using the include 
reserved word, followed by the module name. Modules are also used as a namespace.

module Study
end

class MyClass
  include Study
end

my_obj = MyClass.new


Classes and Objects - Part I

1. class MyCar

  def initialize(year, model, color)
    @year = year
    @model = model
    @color = color
    @current_speed = 0
  end

  def speed_up(number)
    @current_speed += number
    puts "You push the gas and accelerate #{number} mph."
  end

  def brake(number)
    @current_speed -= number
    puts "You push the brake and decelerate #{number} mph."
  end

  def current_speed
    puts "You are now going #{@current_speed} mph."
  end

  def shut_down
    @current_speed = 0
    puts "Let's park."
  end
end

lumina = MyCar.new(1997, 'chevy lumina', 'white')
lumina.speed_up(20)
lumina.current_speed
lumina.speed_up(20)
lumina.current_speed
lumina.brake(20)
lumina.current_speed
lumina.brake(20)
lumina.current_speed
lumina.shut_down
lumina.current_speed

2. class MyCar
   attr_accessor :color
   attr_reader :year
end

3. def spray_paint(color)
     self.color = (color)
     puts "Your new #{color} paint job looks great!"
   end
 end
 
 
Classes and Objects - Part II
 
 1. class MyCar

  def self.gas_mileage(gallons, miles)
    puts "#{miles / gallons} miles per gallon of gas"
  end
end

MyCar.gas_mileage(13, 351)  # => "27 miles per gallon of gas"  

2. class MyCar

  def to_s
    "My car is a #{color}, #{year}, #{@model}!"
  end
end

my_car = MyCar.new("2010", "Ford Focus", "silver")
puts my_car  # => My car is a silver, 2010, Ford Focus.

## Note the "puts" calls "to_s" automatically.

3. We get this error because attr_reader only creates a getter method. 
When we try to reassign the name instance variable to "Bob", we need a setter method called name=. 
We can get this by changing attr_reader to attr_accessor or attr_writer if we don't intend to use the getter functionality.

class Person
  attr_accessor :name
  # attr_writer :name ## => This also works but doesn't allow getter access
  def initialize(name)
    @name = name
  end
end

bob = Person.new("Steve")
bob.name = "Bob"

Inheritance

class Vehicle 
  def self.gas_mileage(gallons, miles)
    puts "#{miles / gallons} miles per gallon of gas"
  end
end

class MyCar < Vehicle
  NUMBER_OF_DOORS = 4
end

class MyTruck < Vehicle
  NUMBER_OF_DOORS = 2
end
  
